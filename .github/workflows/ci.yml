name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job de test et validation
  test:
    name: Tests et Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Configuration Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Installation des dépendances
      run: npm ci

    - name: Vérification du linting
      run: npm run lint

    - name: Vérification TypeScript
      run: npx tsc --noEmit

    - name: Exécution des tests
      run: npm run test:run

    - name: Génération du rapport de couverture
      run: npm run test:coverage

    - name: Upload du rapport de couverture
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job de build
  build:
    name: Build de l'application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Installation des dépendances
      run: npm ci

    - name: Build de l'application
      run: npm run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

    - name: Upload des artefacts de build
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .next/

  # Job de build et déploiement Storybook
  storybook:
    name: Build et déploiement Storybook
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Installation des dépendances
      run: npm ci

    - name: Build de Storybook
      run: npm run build-storybook

    - name: Déploiement sur GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./storybook-static
        destination_dir: storybook

  # Job de sécurité
  security:
    name: Audit de sécurité
    runs-on: ubuntu-latest

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Installation des dépendances
      run: npm ci

    - name: Audit de sécurité npm
      run: npm audit --audit-level=moderate

    - name: Analyse de sécurité avec Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Job de déploiement (uniquement sur main)
  deploy:
    name: Déploiement
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout du code
      uses: actions/checkout@v4

    - name: Déploiement sur Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  # Job de notification
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Notification de succès
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ Pipeline CI/CD terminé avec succès"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Deploy: ${{ needs.deploy.result }}"

    - name: Notification d'échec
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline CI/CD échoué"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        exit 1