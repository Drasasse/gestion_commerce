/**
 * Script de test pour v√©rifier la connexion Redis
 * Usage: npm run test:redis
 */

import 'dotenv/config';
import { testRedisConnection, redis } from '../src/lib/redis';
import { loginRateLimiter, apiRateLimiter } from '../src/lib/rate-limit';
import { setCache, getCache, deleteCache, cached } from '../src/lib/cache';

async function main() {
  console.log('üß™ Test de connexion Redis\n');

  // Test 1: Connexion basique
  console.log('1Ô∏è‚É£  Test de connexion...');
  const isConnected = await testRedisConnection();
  if (!isConnected) {
    console.error('‚ùå Impossible de se connecter √† Redis');
    console.error('V√©rifiez vos variables d\'environnement:');
    console.error('- UPSTASH_REDIS_REST_URL');
    console.error('- UPSTASH_REDIS_REST_TOKEN');
    process.exit(1);
  }

  // Test 2: Op√©rations basiques
  console.log('\n2Ô∏è‚É£  Test des op√©rations basiques...');
  try {
    // SET
    await redis.set('test:key', 'test-value', { ex: 10 });
    console.log('   ‚úÖ SET r√©ussi');

    // GET
    const value = await redis.get('test:key');
    if (value === 'test-value') {
      console.log('   ‚úÖ GET r√©ussi');
    } else {
      console.error('   ‚ùå GET √©chou√© - valeur incorrecte:', value);
    }

    // DELETE
    await redis.del('test:key');
    const deletedValue = await redis.get('test:key');
    if (deletedValue === null) {
      console.log('   ‚úÖ DELETE r√©ussi');
    } else {
      console.error('   ‚ùå DELETE √©chou√© - valeur encore pr√©sente');
    }
  } catch (error) {
    console.error('   ‚ùå Erreur lors des op√©rations basiques:', error);
  }

  // Test 3: Rate Limiting
  console.log('\n3Ô∏è‚É£  Test du rate limiting...');
  try {
    const testIp = 'test-ip-' + Date.now();

    // Test avec API rate limiter (100 req/min)
    let successCount = 0;
    for (let i = 0; i < 3; i++) {
      const { success } = await apiRateLimiter.limit(testIp);
      if (success) successCount++;
    }

    if (successCount === 3) {
      console.log('   ‚úÖ Rate limiting fonctionnel');
      console.log(`   üìä ${successCount}/3 requ√™tes autoris√©es`);
    } else {
      console.error('   ‚ùå Rate limiting non fonctionnel');
    }
  } catch (error) {
    console.error('   ‚ùå Erreur lors du test rate limiting:', error);
  }

  // Test 4: Cache
  console.log('\n4Ô∏è‚É£  Test du syst√®me de cache...');
  try {
    const testKey = 'test:cache:' + Date.now();
    const testData = { foo: 'bar', timestamp: Date.now() };

    // SET Cache
    await setCache(testKey, testData, { ttl: 10 });
    console.log('   ‚úÖ Cache SET r√©ussi');

    // GET Cache
    const cachedData = await getCache(testKey);
    if (cachedData && JSON.stringify(cachedData) === JSON.stringify(testData)) {
      console.log('   ‚úÖ Cache GET r√©ussi');
    } else {
      console.error('   ‚ùå Cache GET √©chou√©');
    }

    // Fonction cached()
    let fetchCount = 0;
    const testFetcher = async () => {
      fetchCount++;
      return { data: 'test', count: fetchCount };
    };

    const result1 = await cached('test:cached', testFetcher, { ttl: 10 });
    const result2 = await cached('test:cached', testFetcher, { ttl: 10 });

    if (result1.count === 1 && result2.count === 1) {
      console.log('   ‚úÖ Fonction cached() r√©ussie (1 seul fetch)');
    } else {
      console.error('   ‚ùå Fonction cached() √©chou√©e (fetch multiple)');
    }

    // DELETE Cache
    await deleteCache(testKey);
    await deleteCache('test:cached');
    console.log('   ‚úÖ Cache DELETE r√©ussi');
  } catch (error) {
    console.error('   ‚ùå Erreur lors du test cache:', error);
  }

  // Test 5: Performance
  console.log('\n5Ô∏è‚É£  Test de performance...');
  try {
    const iterations = 100;
    const start = Date.now();

    for (let i = 0; i < iterations; i++) {
      await redis.set(`perf:test:${i}`, `value-${i}`, { ex: 10 });
    }

    const duration = Date.now() - start;
    const avgTime = duration / iterations;

    console.log(`   ‚úÖ ${iterations} op√©rations en ${duration}ms`);
    console.log(`   üìä Moyenne: ${avgTime.toFixed(2)}ms/op√©ration`);

    // Cleanup
    for (let i = 0; i < iterations; i++) {
      await redis.del(`perf:test:${i}`);
    }
  } catch (error) {
    console.error('   ‚ùå Erreur lors du test performance:', error);
  }

  // R√©sum√©
  console.log('\n‚ú® Tous les tests sont termin√©s!\n');
  console.log('üìù V√©rifiez les r√©sultats ci-dessus.');
  console.log('üìä Consultez aussi Upstash Console pour voir les m√©triques:');
  console.log('   https://console.upstash.com/\n');

  process.exit(0);
}

main().catch((error) => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});
