/**
 * Messages toast standardis√©s pour toute l'application
 * Utilise react-hot-toast
 */

import toast from 'react-hot-toast';

// Configuration par d√©faut des toasts
export const toastConfig = {
  duration: 4000,
  position: 'top-right' as const,
  style: {
    borderRadius: '8px',
    padding: '12px 20px',
    fontSize: '14px',
  },
};

/**
 * Messages de succ√®s standardis√©s
 */
export const successMessages = {
  // Ventes
  venteCreated: () => toast.success('‚úÖ Vente enregistr√©e avec succ√®s!', toastConfig),
  venteUpdated: () => toast.success('‚úÖ Vente modifi√©e avec succ√®s!', toastConfig),
  venteDeleted: () => toast.success('‚úÖ Vente supprim√©e avec succ√®s!', toastConfig),

  // Produits
  produitCreated: () => toast.success('‚úÖ Produit ajout√© avec succ√®s!', toastConfig),
  produitUpdated: () => toast.success('‚úÖ Produit modifi√© avec succ√®s!', toastConfig),
  produitDeleted: () => toast.success('‚úÖ Produit supprim√© avec succ√®s!', toastConfig),

  // Cat√©gories
  categorieCreated: () => toast.success('‚úÖ Cat√©gorie cr√©√©e avec succ√®s!', toastConfig),
  categorieUpdated: () => toast.success('‚úÖ Cat√©gorie modifi√©e avec succ√®s!', toastConfig),
  categorieDeleted: () => toast.success('‚úÖ Cat√©gorie supprim√©e avec succ√®s!', toastConfig),

  // Clients
  clientCreated: () => toast.success('‚úÖ Client ajout√© avec succ√®s!', toastConfig),
  clientUpdated: () => toast.success('‚úÖ Client modifi√© avec succ√®s!', toastConfig),
  clientDeleted: () => toast.success('‚úÖ Client supprim√© avec succ√®s!', toastConfig),

  // Stocks
  stockUpdated: () => toast.success('‚úÖ Stock mis √† jour avec succ√®s!', toastConfig),
  mouvementCreated: () => toast.success('‚úÖ Mouvement de stock enregistr√©!', toastConfig),

  // Paiements
  paiementCreated: () => toast.success('‚úÖ Paiement enregistr√© avec succ√®s!', toastConfig),
  paiementUpdated: () => toast.success('‚úÖ Paiement modifi√© avec succ√®s!', toastConfig),

  // Transactions
  transactionCreated: () => toast.success('‚úÖ Transaction enregistr√©e!', toastConfig),
  transactionDeleted: () => toast.success('‚úÖ Transaction supprim√©e!', toastConfig),

  // Boutiques (Admin)
  boutiqueCreated: () => toast.success('‚úÖ Boutique cr√©√©e avec succ√®s!', toastConfig),
  boutiqueUpdated: () => toast.success('‚úÖ Boutique modifi√©e avec succ√®s!', toastConfig),
  boutiqueDeleted: () => toast.success('‚úÖ Boutique supprim√©e avec succ√®s!', toastConfig),

  // Utilisateurs (Admin)
  userCreated: () => toast.success('‚úÖ Utilisateur cr√©√© avec succ√®s!', toastConfig),
  userUpdated: () => toast.success('‚úÖ Utilisateur modifi√© avec succ√®s!', toastConfig),
  userDeleted: () => toast.success('‚úÖ Utilisateur supprim√© avec succ√®s!', toastConfig),

  // Capital (Admin)
  capitalInjected: () => toast.success('‚úÖ Injection de capital enregistr√©e!', toastConfig),

  // G√©n√©ral
  dataSaved: () => toast.success('‚úÖ Donn√©es enregistr√©es!', toastConfig),
  dataExported: () => toast.success('‚úÖ Donn√©es export√©es avec succ√®s!', toastConfig),
  printSuccess: () => toast.success('‚úÖ Impression lanc√©e!', toastConfig),
  copySuccess: () => toast.success('‚úÖ Copi√© dans le presse-papier!', toastConfig),
};

/**
 * Messages d'erreur standardis√©s
 */
export const errorMessages = {
  // Ventes
  venteCreateError: () => toast.error('‚ùå Erreur lors de la cr√©ation de la vente', toastConfig),
  venteUpdateError: () => toast.error('‚ùå Erreur lors de la modification', toastConfig),
  venteDeleteError: () => toast.error('‚ùå Erreur lors de la suppression', toastConfig),
  stockInsuffisant: (produit: string) => toast.error(`‚ùå Stock insuffisant pour ${produit}!`, toastConfig),

  // Produits
  produitCreateError: () => toast.error('‚ùå Erreur lors de l\'ajout du produit', toastConfig),
  produitUpdateError: () => toast.error('‚ùå Erreur lors de la modification', toastConfig),
  produitDeleteError: () => toast.error('‚ùå Erreur lors de la suppression', toastConfig),
  produitInUse: () => toast.error('‚ùå Ce produit est utilis√© dans des ventes', toastConfig),

  // Cat√©gories
  categorieCreateError: () => toast.error('‚ùå Erreur lors de la cr√©ation', toastConfig),
  categorieDeleteError: () => toast.error('‚ùå Erreur lors de la suppression', toastConfig),
  categorieInUse: () => toast.error('‚ùå Cette cat√©gorie contient des produits', toastConfig),

  // Clients
  clientCreateError: () => toast.error('‚ùå Erreur lors de l\'ajout du client', toastConfig),
  clientUpdateError: () => toast.error('‚ùå Erreur lors de la modification', toastConfig),
  clientDeleteError: () => toast.error('‚ùå Erreur lors de la suppression', toastConfig),
  clientInUse: () => toast.error('‚ùå Ce client a des ventes associ√©es', toastConfig),

  // Stocks
  stockUpdateError: () => toast.error('‚ùå Erreur lors de la mise √† jour du stock', toastConfig),
  mouvementCreateError: () => toast.error('‚ùå Erreur lors de l\'enregistrement', toastConfig),

  // Paiements
  paiementCreateError: () => toast.error('‚ùå Erreur lors de l\'enregistrement', toastConfig),
  montantInvalide: () => toast.error('‚ùå Montant invalide!', toastConfig),

  // Authentification
  loginError: () => toast.error('‚ùå Identifiants incorrects', toastConfig),
  unauthorized: () => toast.error('‚ùå Acc√®s non autoris√©', toastConfig),
  sessionExpired: () => toast.error('‚ùå Session expir√©e, reconnectez-vous', toastConfig),

  // G√©n√©ral
  networkError: () => toast.error('‚ùå Erreur de connexion au serveur', toastConfig),
  validationError: (message?: string) => toast.error(`‚ùå ${message || 'Donn√©es invalides'}`, toastConfig),
  serverError: () => toast.error('‚ùå Erreur serveur, r√©essayez plus tard', toastConfig),
  notFound: (resource: string) => toast.error(`‚ùå ${resource} introuvable`, toastConfig),
  exportError: () => toast.error('‚ùå Erreur lors de l\'export', toastConfig),
  printError: () => toast.error('‚ùå Erreur lors de l\'impression', toastConfig),
};

/**
 * Messages d'information
 */
export const infoMessages = {
  stockFaible: (produit: string, quantite: number) =>
    toast(`‚ÑπÔ∏è Stock faible: ${produit} (${quantite} restants)`, {
      ...toastConfig,
      icon: '‚ö†Ô∏è',
      style: {
        ...toastConfig.style,
        background: '#FEF3C7',
        color: '#92400E',
      },
    }),

  paiementPartiel: (montant: number, total: number) =>
    toast(`‚ÑπÔ∏è Paiement partiel: ${montant} FCFA sur ${total} FCFA`, {
      ...toastConfig,
      icon: 'üí∞',
      style: {
        ...toastConfig.style,
        background: '#DBEAFE',
        color: '#1E40AF',
      },
    }),

  impayeElev√©: (client: string, montant: number) =>
    toast(`‚ö†Ô∏è Impay√©s √©lev√©s pour ${client}: ${montant} FCFA`, {
      ...toastConfig,
      icon: '‚ö†Ô∏è',
      duration: 6000,
      style: {
        ...toastConfig.style,
        background: '#FEE2E2',
        color: '#991B1B',
      },
    }),

  dataLoading: () => toast.loading('Chargement en cours...', toastConfig),
  dataSaving: () => toast.loading('Enregistrement en cours...', toastConfig),
  dataExporting: () => toast.loading('Export en cours...', toastConfig),

  noData: () => toast('‚ÑπÔ∏è Aucune donn√©e disponible', toastConfig),
  noChanges: () => toast('‚ÑπÔ∏è Aucune modification d√©tect√©e', toastConfig),
};

/**
 * Messages de confirmation (pour les modals)
 */
export const confirmMessages = {
  deleteVente: '√ätes-vous s√ªr de vouloir supprimer cette vente?',
  deleteProduit: '√ätes-vous s√ªr de vouloir supprimer ce produit?',
  deleteCategorie: '√ätes-vous s√ªr de vouloir supprimer cette cat√©gorie?',
  deleteClient: '√ätes-vous s√ªr de vouloir supprimer ce client?',
  deleteBoutique: '√ätes-vous s√ªr de vouloir supprimer cette boutique?',
  deleteUser: '√ätes-vous s√ªr de vouloir supprimer cet utilisateur?',
  deleteTransaction: '√ätes-vous s√ªr de vouloir supprimer cette transaction?',

  cancelVente: 'Annuler cette vente? Les donn√©es saisies seront perdues.',
  cancelEdit: 'Annuler les modifications?',

  confirmPrintAll: 'Imprimer tous les √©l√©ments s√©lectionn√©s?',
  confirmExportAll: 'Exporter toutes les donn√©es?',

  stockNegative: 'Cette op√©ration mettra le stock en n√©gatif. Continuer?',
  prixInferieur: 'Le prix de vente est inf√©rieur au prix d\'achat. Continuer?',
};

/**
 * Fonction helper pour afficher un toast avec gestion d'erreur automatique
 */
export function handleApiResponse<T>(
  promise: Promise<Response>,
  successMessage: () => void,
  errorMessage?: () => void
): Promise<T> {
  return promise
    .then(async (res) => {
      if (res.ok) {
        successMessage();
        return res.json();
      } else {
        const error = await res.json();
        if (errorMessage) {
          errorMessage();
        } else {
          errorMessages.validationError(error.error || error.message);
        }
        throw new Error(error.error || error.message);
      }
    })
    .catch((error) => {
      if (!errorMessage && error.message !== 'Failed to fetch') {
        errorMessages.networkError();
      }
      throw error;
    });
}

/**
 * Dismiss toast par ID ou tous
 */
export const dismissToast = (toastId?: string) => {
  if (toastId) {
    toast.dismiss(toastId);
  } else {
    toast.dismiss();
  }
};
